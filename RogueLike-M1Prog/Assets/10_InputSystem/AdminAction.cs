//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/10_InputSystem/AdminAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AdminAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AdminAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AdminAction"",
    ""maps"": [
        {
            ""name"": ""Admin"",
            ""id"": ""90c570b4-ac21-4101-889e-603efed121c9"",
            ""actions"": [
                {
                    ""name"": ""RemoveAI"",
                    ""type"": ""Value"",
                    ""id"": ""501aa0c8-4c8e-44d0-9d8b-d9d9f2ee14ed"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae4652f7-738a-439e-a3df-fc2880c90f74"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveAI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Admin
        m_Admin = asset.FindActionMap("Admin", throwIfNotFound: true);
        m_Admin_RemoveAI = m_Admin.FindAction("RemoveAI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Admin
    private readonly InputActionMap m_Admin;
    private IAdminActions m_AdminActionsCallbackInterface;
    private readonly InputAction m_Admin_RemoveAI;
    public struct AdminActions
    {
        private @AdminAction m_Wrapper;
        public AdminActions(@AdminAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @RemoveAI => m_Wrapper.m_Admin_RemoveAI;
        public InputActionMap Get() { return m_Wrapper.m_Admin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AdminActions set) { return set.Get(); }
        public void SetCallbacks(IAdminActions instance)
        {
            if (m_Wrapper.m_AdminActionsCallbackInterface != null)
            {
                @RemoveAI.started -= m_Wrapper.m_AdminActionsCallbackInterface.OnRemoveAI;
                @RemoveAI.performed -= m_Wrapper.m_AdminActionsCallbackInterface.OnRemoveAI;
                @RemoveAI.canceled -= m_Wrapper.m_AdminActionsCallbackInterface.OnRemoveAI;
            }
            m_Wrapper.m_AdminActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RemoveAI.started += instance.OnRemoveAI;
                @RemoveAI.performed += instance.OnRemoveAI;
                @RemoveAI.canceled += instance.OnRemoveAI;
            }
        }
    }
    public AdminActions @Admin => new AdminActions(this);
    public interface IAdminActions
    {
        void OnRemoveAI(InputAction.CallbackContext context);
    }
}
